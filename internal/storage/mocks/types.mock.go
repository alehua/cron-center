// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -package=storagemocks -destination=mocks/types.mock.go Storager
//

// Package storagemocks is a generated GoMock package.
package storagemocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/alehua/cron-center/internal/storage"
	task "github.com/alehua/cron-center/internal/task"
	gomock "go.uber.org/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddExecution mocks base method.
func (m *MockStorager) AddExecution(ctx context.Context, taskId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExecution", ctx, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExecution indicates an expected call of AddExecution.
func (mr *MockStoragerMockRecorder) AddExecution(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExecution", reflect.TypeOf((*MockStorager)(nil).AddExecution), ctx, taskId)
}

// AutoRefresh mocks base method.
func (m *MockStorager) AutoRefresh(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutoRefresh", ctx)
}

// AutoRefresh indicates an expected call of AutoRefresh.
func (mr *MockStoragerMockRecorder) AutoRefresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoRefresh", reflect.TypeOf((*MockStorager)(nil).AutoRefresh), ctx)
}

// Events mocks base method.
func (m *MockStorager) Events(ctx context.Context, taskEvents <-chan task.Event) <-chan storage.Event {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Events", ctx, taskEvents)
	ret0, _ := ret[0].(<-chan storage.Event)
	return ret0
}

// Events indicates an expected call of Events.
func (mr *MockStoragerMockRecorder) Events(ctx, taskEvents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Events", reflect.TypeOf((*MockStorager)(nil).Events), ctx, taskEvents)
}

// Get mocks base method.
func (m *MockStorager) Get(ctx context.Context, id int64) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStoragerMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorager)(nil).Get), ctx, id)
}

// Insert mocks base method.
func (m *MockStorager) Insert(ctx context.Context, t *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStoragerMockRecorder) Insert(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStorager)(nil).Insert), ctx, t)
}

// Preempt mocks base method.
func (m *MockStorager) Preempt(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Preempt", ctx)
}

// Preempt indicates an expected call of Preempt.
func (mr *MockStoragerMockRecorder) Preempt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preempt", reflect.TypeOf((*MockStorager)(nil).Preempt), ctx)
}

// Release mocks base method.
func (m *MockStorager) Release(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockStoragerMockRecorder) Release(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockStorager)(nil).Release), ctx, id)
}

// MockTaskDAO is a mock of TaskDAO interface.
type MockTaskDAO struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDAOMockRecorder
}

// MockTaskDAOMockRecorder is the mock recorder for MockTaskDAO.
type MockTaskDAOMockRecorder struct {
	mock *MockTaskDAO
}

// NewMockTaskDAO creates a new mock instance.
func NewMockTaskDAO(ctrl *gomock.Controller) *MockTaskDAO {
	mock := &MockTaskDAO{ctrl: ctrl}
	mock.recorder = &MockTaskDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDAO) EXPECT() *MockTaskDAOMockRecorder {
	return m.recorder
}

// AddExecution mocks base method.
func (m *MockTaskDAO) AddExecution(ctx context.Context, taskId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExecution", ctx, taskId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExecution indicates an expected call of AddExecution.
func (mr *MockTaskDAOMockRecorder) AddExecution(ctx, taskId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExecution", reflect.TypeOf((*MockTaskDAO)(nil).AddExecution), ctx, taskId)
}

// AutoRefresh mocks base method.
func (m *MockTaskDAO) AutoRefresh(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AutoRefresh", ctx)
}

// AutoRefresh indicates an expected call of AutoRefresh.
func (mr *MockTaskDAOMockRecorder) AutoRefresh(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoRefresh", reflect.TypeOf((*MockTaskDAO)(nil).AutoRefresh), ctx)
}

// Get mocks base method.
func (m *MockTaskDAO) Get(ctx context.Context, id int64) (*task.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(*task.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTaskDAOMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTaskDAO)(nil).Get), ctx, id)
}

// Insert mocks base method.
func (m *MockTaskDAO) Insert(ctx context.Context, t *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockTaskDAOMockRecorder) Insert(ctx, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTaskDAO)(nil).Insert), ctx, t)
}

// Preempt mocks base method.
func (m *MockTaskDAO) Preempt(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Preempt", ctx)
}

// Preempt indicates an expected call of Preempt.
func (mr *MockTaskDAOMockRecorder) Preempt(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Preempt", reflect.TypeOf((*MockTaskDAO)(nil).Preempt), ctx)
}

// Release mocks base method.
func (m *MockTaskDAO) Release(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockTaskDAOMockRecorder) Release(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockTaskDAO)(nil).Release), ctx, id)
}
